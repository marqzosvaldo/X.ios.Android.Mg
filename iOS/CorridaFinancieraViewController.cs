// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using maringuizarapp.Model;
using maringuizarapp.Service;

using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Globalization;


namespace maringuizarapp.iOS{
	public partial class CorridaFinancieraViewController : UIViewController{
		List<Planes> listPlanes;
		CultureInfo cultureinfo = new System.Globalization.CultureInfo("en-US");
		//DateTime localDate;
		public override void ViewDidLoad() {
			base.ViewDidLoad();

			//cDatePicker.ValueChanged += CDatePicker_ValueChanged;

			Console.WriteLine("Iniciando CorridaFinancieraViewController...");
			viewPickerPlan.Layer.CornerRadius = 5;
			viewDetailsPickerPlan.Layer.CornerRadius = 5;

			buttonCalcCorrida.TouchUpInside += (sender, e) => {
				Console.WriteLine("Button calc!");

				Console.WriteLine("Enganche Calculado "+CalcEnganche(textFieldMonto.Text, porcenganche));
				labelEngancheCorrida.Text = CalcEnganche(textFieldMonto.Text, porcenganche).ToString();
			};



			//DateTime localDate = DateTime.Parse("9/4/17", cultureinfo);
			 //localDate = new DateTime(2017, 09, 21);

			//localDate = localDate.Date;

			//Console.WriteLine("Today is: "+ localDate);
			//Console.WriteLine("next month  is: "+ localDate.AddMonths(1));


			//UIPickerView para seleccinar planes de pago 

		}
		//Obteniendo Fechas del Datepicker
		//NSDate date;
		//void CDatePicker_ValueChanged(object sender, EventArgs e) {
		//	date = cDatePicker.Date;

		//	Console.WriteLine("myDatePicker: "+ date.ToString());
		//	DateTime localDate = DateTime.Parse(date.ToString(), cultureinfo);

		//	Console.WriteLine("Today is: "+ localDate);
		//	Console.WriteLine("next month  is: "+ localDate.AddMonths(1));


		//}

		public double CalcEnganche(string cant, object percent) {
			var cantidad = Convert.ToDouble(cant);
			var porcentaje = Convert.ToDouble(percent);


			return cantidad * (1 / porcentaje);
		}
		Object porcenganche;

		public async override void ViewWillAppear(bool animated) {
			base.ViewWillAppear(animated);
			if (await readyAsync() == true) {
				Console.WriteLine("Corrida financiera genericlist Ready!");

				var planesViewModel = new PlanesViewModel(listPlanes);

				PlanesPicker.Model = planesViewModel;

				planesViewModel.PaysSelected += (sender, e) => {
					Console.WriteLine("Numero de pagos seleccionado ---->> "+planesViewModel.SelectedPlan);

					labelIDCorrida.Text = planesViewModel.IDPlan;
					labelDescripcionCorrida.Text = planesViewModel.Descripcion;
					labelNoPagosCorrida.Text = planesViewModel.NoPagos.ToString();
					porcenganche = planesViewModel.Porcentaje;

				};

				//tableCorridaFinanciera.Source = new sourceCorridaFinanciera();

				//var pagos = planesViewModel.planPays();
				//Console.WriteLine("No PAGOS:------>>>> "+pagos);
				//PlanesPicker.Model = new PlanesViewModel(listPlanes);

				//PlanesPicker.p

			} else { 
				Console.WriteLine("Corrida financiera genericlist NOT Ready!");

			}

			Console.WriteLine("Lista de planes: "+listPlanes.Count);


		
		}

		async Task<bool> readyAsync() {
			try {
				Service.Service servicio = new Service.Service();

				listPlanes = await servicio.PlansAsync();
				Console.WriteLine("Lista de planes: "+listPlanes.Count);

				return true;

			}
			catch{
				return false;
			}
		}

		public CorridaFinancieraViewController (IntPtr handle) : base (handle){
		}
	}
}
