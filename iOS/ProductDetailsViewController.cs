// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using maringuizarapp.Model;
using Foundation;
using UIKit;

namespace maringuizarapp.iOS{
	public partial class ProductDetailsViewController : UIViewController {

		string precioCostoFijo;
		string descripcion;
		string idProducto;
		string precioVenta;
		string nombreCorto;
		List<DetailProductStock> lstDetailProductStock;
		List<Aumentos> listAumentos;
		ProductsGeneral cartItem = new ProductsGeneral();
		Cart carrito = new Cart();
		public  static Int32  badgeCount {get; set;}



		public string PrecioVenta { 
			get { return precioVenta;}
			set { precioVenta = value;}
		}
		public string CostoFijo {
			get { return precioCostoFijo; }
			set { precioCostoFijo = value;}
		}

		public string idProduct { 
			get { return idProducto;}
			set { idProducto = value;}
		}
		public string Descripcion { 
			get { return descripcion;}
			set { descripcion = value;}
		}
		public string NombreCorto { 
			get { return nombreCorto; }
			set { nombreCorto = value;}
		}

		public override void ViewDidLoad() {
			base.ViewDidLoad();
			this.Title = "Detalles";
			stockButton.TouchUpInside += StockButton_TouchUpInside;
			addItemToCart.Clicked += AddItemToCart_Clicked;
			Console.WriteLine("totall carrito!!!!!!!!");
			//cart.cartTotal();

			stockButton.Enabled = false;
			stockButton.BackgroundColor = UIColor.Gray;

			labelPrecioCostoFijo.Text = precioCostoFijo;
			labelPrecioVenta.Text = "$"+precioVenta;

			textViewDescripciÃ³n.Text = descripcion;


			viewCostoFijo.Layer.CornerRadius = 5;
			viewDescripcion.Layer.CornerRadius = 5;
			viewPrecioVenta.Layer.CornerRadius = 5;
		}

		void AddItemToCart_Clicked(object sender, EventArgs e) {
			Console.WriteLine("clicked!");



			cartItem.IDCODIGO = idProduct;
			cartItem.PRECIOCOSTOFIJO = CostoFijo;
			cartItem.precioventa1 = Convert.ToDouble(precioVenta);
			cartItem.NOMBRECORTO = nombreCorto;

			Console.WriteLine("totall carrito!!!!!!!!");
			//CurrentSession.CartProduct.Add(cartItem);
			carrito.cartAdd(cartItem);


			this.TabBarController.ViewControllers[1].TabBarItem.BadgeValue = CurrentSession.CartProduct.Count.ToString();
			Console.WriteLine(CurrentSession.CartProduct[0].IDCODIGO);
			Console.WriteLine("carrito instance " + carrito.cartTotal());
			badgeCount ++;

		}

		public async  override void ViewWillAppear(bool animated) {
			base.ViewWillAppear(animated);

			try {
				Service.Service servicio = new Service.Service();
				Service.Service servAumentos = new Service.Service();
				listAumentos = await servAumentos.getAumentos();

				Console.WriteLine("IdProducto"+idProduct +"  adasd" +idProducto);
				lstDetailProductStock = await servicio.DetailStock(idProducto);

				aumentosTable.Source = new aumentosSource(listAumentos, CostoFijo, precioVenta);
				aumentosTable.ReloadData();

				Console.WriteLine("Stock detalle " + lstDetailProductStock.Count);
				if (lstDetailProductStock.Count > 0) {
					stockButton.Enabled = true;
					stockButton.BackgroundColor = UIColor.FromRGB(255,38,0);
				}

			}
			catch {
				Console.WriteLine("Fallo solicitar stockDetail");
				var stockErrorAlert = UIAlertController.Create("Error de Red", "Necesita conectarse para solicitar estos datos", UIAlertControllerStyle.Alert);


				stockErrorAlert.AddAction (UIAlertAction.Create ("Ok", UIAlertActionStyle.Default, null));
			}

		}

		void StockButton_TouchUpInside(object sender, EventArgs e) {
			var productStock= (StockTableViewController)Storyboard.InstantiateViewController("StockTableViewController");
			Console.WriteLine("Enviando: "+ lstDetailProductStock.Count);

			productStock.StockList = lstDetailProductStock;
			this.NavigationController.PushViewController(productStock, true);


		}

		public ProductDetailsViewController (IntPtr handle) : base (handle){
		}
	}
}
